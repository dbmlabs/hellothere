package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"net/http"

	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

const (
	page = `<!DOCTYPE html>
	<html lang="en">
	<head>
	    <meta charset="utf-8">
	    <title>vWeekly Reporter</title>
	        <meta name="viewport" content="width=device-width, initial-scale=1">
	    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
	    <style type="text/css">
	    .entry:not(:first-of-type)
	{
	    margin-top: 10px;
	}

	.glyphicon
	{
	    font-size: 20px;
	}
	    </style>
	    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0-alpha1/jquery.min.js"></script>
	    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
	    <link href="http://cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/css/bootstrap-editable.css" rel="stylesheet"/>
	    <script src="http://cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/js/bootstrap-editable.min.js"></script>


	</head>
	<body>
	  <nav class="navbar navbar-default">
	  <div class="container-fluid">
	    <!-- Brand and toggle get grouped for better mobile display -->
	    <div class="navbar-header">
	      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
	        <span class="sr-only">Toggle navigation</span>
	        <span class="icon-bar"></span>
	        <span class="icon-bar"></span>
	        <span class="icon-bar"></span>
	      </button>
	      <a class="navbar-brand" href="#">VMware Weekly Reporter</a>
	    </div>

	    <!-- Collect the nav links, forms, and other content for toggling -->
	    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
	      <ul class="nav navbar-nav">
	        <li class="active"><a href="#">Help <span class="sr-only">(current)</span></a></li>
	        <li><a href="#">About</a></li>
	        <li class="dropdown">
	          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Dropdown <span class="caret"></span></a>
	          <ul class="dropdown-menu">
	            <li><a href="#">Admin</a></li>
	            <li><a href="#">Help</a></li>
	            <li><a href="#">Something else here</a></li>
	            <li role="separator" class="divider"></li>
	            <li><a href="#">Separated link</a></li>
	            <li role="separator" class="divider"></li>
	            <li><a href="#">One more separated link</a></li>
	          </ul>
	        </li>
	      </ul>

	    </div><!-- /.navbar-collapse -->
	  </div><!-- /.container-fluid -->
	</nav>


		<div class="container">
	  <div class="row">


	    <script>
	    $(document).ready(function() {
	    var max_fields      = 10; //maximum input boxes allowed
	    var wrapper         = $(".controls"); //Fields wrapper
	    var add_button      = $(".btn-add"); //Add button ID

	    var x = 1; //initlal text box count
	    $(add_button).click(function(e){ //on add input button click
	        e.preventDefault();
	        if(x < max_fields){ //max input box allowed
	            x++; //text box increment
	            $(wrapper).append('<div><div class="entry input-group col-xs-4"><input class="form-control" name="fields[]" type="text" placeholder="Subject" /></div><div class="entry input-group col-xs-5"><textarea class="form-control" name="fields[]" type="text" placeholder="Description" rows="3"></textarea></div><div class="entry input-group col-xs-5"><input class="form-control" name="fields[]" type="text" placeholder="Hashtag" /></div><a href="#" class="remove_field"><div class="btn-group" role="group" aria-label="..."><button class="btn btn-danger btn-add" type="button"><span class="glyphicon glyphicon-pencil"></span></button></div></a></div></div'); //add input box
	        }
	    });

	    $(wrapper).on("click",".remove_field", function(e){ //user click on remove text
	        e.preventDefault(); $(this).parent('div').remove(); x--;
	    })
	    });
	    </script>

		<div class="row">
	        <div class="control-group" id="fields">
	            <label class="control-label" for="field1">Weekly Report</label>
							<form role="form" autocomplete="off">
							<div class="controls">

	                    <div class="entry input-group col-xs-4">
	                        <input class="form-control" name="fields[]" type="text" placeholder="Subject" />
	                    </div>
	                    <div class="entry input-group col-xs-5">
	                        <textarea class="form-control" name="fields[]" type="text" placeholder="Description" rows="3"></textarea>
	                    </div>
	                    <div class="entry input-group col-xs-5">
	                        <input class="form-control" name="fields[]" type="text" placeholder="Hashtag" />
	                    </div>
	                    <br>

	            </div> <! -- end of controls -->
	        	</div> <!-- end of control-group -->
        							<div class="btn-toolbar" role="toolbar" aria-label="...">
	          						<div class="btn-group" role="group" aria-label="...">
													<button class="btn btn-success btn-add" type="button">
	            							<span class="glyphicon glyphicon-plus"></span>
													</button>
												<div class="btn-group" role="group" aria-label="...">
													&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp
												</div>
												<div class="btn-group" role="group" aria-label="...">
													<input type="submit" class="btn btn-default btn-primary" value="Submit">
												</div>
											</div><!--end btn-toolbar-->
								</form>

		</div> <!-- end of row -->
	</div> <!-- end of container -->

	</body>
	</html>`

	/*form = `<div class="entry input-group col-xs-4">
				<input class="form-control" name="fields[]" type="text" placeholder="Subject" />
		</div>
		<div class="entry input-group col-xs-5">
				<textarea class="form-control" name="fields[]" type="text" placeholder="Description" rows="3"></textarea>
		</div>
		<div class="entry input-group col-xs-5">
				<input class="form-control" name="fields[]" type="text" placeholder="Hashtag" />
		</div>
		<br>
		<div class="btn-toolbar" role="toolbar" aria-label="...">
			<div class="btn-group" role="group" aria-label="..."><button class="btn btn-success btn-add" type="button">
				<span class="glyphicon glyphicon-plus"></span>
			</button></div>
			<div class="btn-group" role="group" aria-label="..."><button class="btn btn-warning btn-add" type="button">
				<span class="glyphicon glyphicon-pencil"></span>
			</button></div>
		</div>`

		endform = `<button type="submit" class="btn btn-default">Submit</button>
	  </form>
	  </body>
	  </html>`*/
)

type Data struct {
	Title   string `bson:"title"`
	Content string `bson:"content"`
	Hash    string `bson:"hash"`
}

type Person struct {
	Name    string `bson:"name"`
	Manager string `bson:"manager"`
}

func main() {
	http.HandleFunc("/", homePage)
	http.HandleFunc("/api", post)
	if err := http.ListenAndServe(":9001", nil); err != nil {
		log.Fatal("failed to start server", err)
	}

}

func post(w http.ResponseWriter, r *http.Request) {
	text, _ := ioutil.ReadAll(r.Body)
	fmt.Println(string(text))
}

func homePage(w http.ResponseWriter, r *http.Request) {
	fmt.Fprint(w, page)
	r.ParseForm()
	x := r.Form["fields[]"]
	fmt.Println(x, len(x))

	for _, data := range x {
		fmt.Println(data)
	}

}

/* import template
t, _ := template.ParseFiles("../template/shotchart.html")
t.Execute(wr io.Writer, p)
*/

func db() {
	session, err := mgo.Dial("192.168.22.128:27017")
	if err != nil {
		panic(err)
	}
	defer session.Close()

	string := "Timmy"

	// Optional. Switch the session to a monotonic behavior.
	session.SetMode(mgo.Monotonic, true)

	c := session.DB("uyytest").C("persons1")

	err = c.Insert(&Data{"Cla awesome work dsfkj  bladfs ", "#wells", "Tim Callaghan"},
		&Data{"Ale awesome work dsfkj  bladfs ", "#wells", string})

	if err != nil {
		log.Fatal(err)
	}

	result := Data{}
	err = c.Find(bson.M{"title": "wells fargo"}).One(&result)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Content:", result.Content)
	fmt.Println("Hash:", result.Hash)

	var results []Data

	err = c.Find(bson.M{}).All(&results)
	for _, name := range results {
		fmt.Println(name.Title)
	}
	fmt.Println("results All: ", results)

	names, _ := session.DatabaseNames()
	collection, _ := session.DB("uyytest").CollectionNames()
	fmt.Println("database names", names)
	fmt.Println("collection names", collection)
}
